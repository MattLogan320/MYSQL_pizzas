Data Query Language 

SELECT

DISTINCT:
If there are multiple occurences of a value in a selected table column, it will return only unique entries
(no duplicates)

SELECT DISTINCT <column_name>   FROM  <table_name>;

BETWEEN: 
Looks for stufff in a range

SELECT <column_names> FROM <table> WHERE <column_name> BETWEEN <constraint1> and <constraint2>;


LIKE:
Search for patterns in a string

%-represents any amount of characters (0-5000)

e.g. %wolf- represents any value ending in wolf
     wolf%- represents any value beginning with wolf
     %wolf%- represents any value containing wolf    

SELECT <columns> FROM <table> WHERE <column_name> LIKE <%value_to_search_for> ;


IN OR NOT IN:
Specifying possible values for a field

useful in combination with other commands


ORDER BY:
Specifying what order  the results should be displayed in and by what column.

ASC- Ascending
DESC- Descending

SELECT <columns> FROM <table> ORDER BY <column_to_order> ASC/DESC;

ALIASING:
Replacing existing columns with a new column name and/or combining old columns into a new column

SELECT <other_columns>,<column_to_change> AS <new_column_name> FROM <table>;

For combining columns:

SELECT CONCAT(<column_to_be_combined>, <other_column_to_combine>) AS <new_column_name> FROM <table>;


Aliasing can also be used to perform calculations between two values and print them as a new value:

SELECT <other_columns>, <column1>*<column2> AS <new_column_name> FROM <table>;

